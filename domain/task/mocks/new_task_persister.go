// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/marcelo-rocha/task-service-challenge/domain/task"
	"sync"
	"time"
)

// Ensure, that NewTaskPersisterMock does implement task.NewTaskPersister.
// If this is not the case, regenerate this file with moq.
var _ task.NewTaskPersister = &NewTaskPersisterMock{}

// NewTaskPersisterMock is a mock implementation of task.NewTaskPersister.
//
// 	func TestSomethingThatUsesNewTaskPersister(t *testing.T) {
//
// 		// make and configure a mocked task.NewTaskPersister
// 		mockedNewTaskPersister := &NewTaskPersisterMock{
// 			InsertTaskFunc: func(ctx context.Context, name string, summary string, creationDate time.Time, userId int64) (int64, error) {
// 				panic("mock out the InsertTask method")
// 			},
// 		}
//
// 		// use mockedNewTaskPersister in code that requires task.NewTaskPersister
// 		// and then make assertions.
//
// 	}
type NewTaskPersisterMock struct {
	// InsertTaskFunc mocks the InsertTask method.
	InsertTaskFunc func(ctx context.Context, name string, summary string, creationDate time.Time, userId int64) (int64, error)

	// calls tracks calls to the methods.
	calls struct {
		// InsertTask holds details about calls to the InsertTask method.
		InsertTask []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Summary is the summary argument value.
			Summary string
			// CreationDate is the creationDate argument value.
			CreationDate time.Time
			// UserId is the userId argument value.
			UserId int64
		}
	}
	lockInsertTask sync.RWMutex
}

// InsertTask calls InsertTaskFunc.
func (mock *NewTaskPersisterMock) InsertTask(ctx context.Context, name string, summary string, creationDate time.Time, userId int64) (int64, error) {
	callInfo := struct {
		Ctx          context.Context
		Name         string
		Summary      string
		CreationDate time.Time
		UserId       int64
	}{
		Ctx:          ctx,
		Name:         name,
		Summary:      summary,
		CreationDate: creationDate,
		UserId:       userId,
	}
	mock.lockInsertTask.Lock()
	mock.calls.InsertTask = append(mock.calls.InsertTask, callInfo)
	mock.lockInsertTask.Unlock()
	if mock.InsertTaskFunc == nil {
		var (
			nOut   int64
			errOut error
		)
		return nOut, errOut
	}
	return mock.InsertTaskFunc(ctx, name, summary, creationDate, userId)
}

// InsertTaskCalls gets all the calls that were made to InsertTask.
// Check the length with:
//     len(mockedNewTaskPersister.InsertTaskCalls())
func (mock *NewTaskPersisterMock) InsertTaskCalls() []struct {
	Ctx          context.Context
	Name         string
	Summary      string
	CreationDate time.Time
	UserId       int64
} {
	var calls []struct {
		Ctx          context.Context
		Name         string
		Summary      string
		CreationDate time.Time
		UserId       int64
	}
	mock.lockInsertTask.RLock()
	calls = mock.calls.InsertTask
	mock.lockInsertTask.RUnlock()
	return calls
}
