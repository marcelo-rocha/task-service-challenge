// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/marcelo-rocha/task-service-challenge/domain/entities"
	"github.com/marcelo-rocha/task-service-challenge/domain/task"
	"sync"
)

// Ensure, that GetTaskPersisterMock does implement task.GetTaskPersister.
// If this is not the case, regenerate this file with moq.
var _ task.GetTaskPersister = &GetTaskPersisterMock{}

// GetTaskPersisterMock is a mock implementation of task.GetTaskPersister.
//
// 	func TestSomethingThatUsesGetTaskPersister(t *testing.T) {
//
// 		// make and configure a mocked task.GetTaskPersister
// 		mockedGetTaskPersister := &GetTaskPersisterMock{
// 			GetTaskFunc: func(ctx context.Context, id int64) (entities.Task, error) {
// 				panic("mock out the GetTask method")
// 			},
// 		}
//
// 		// use mockedGetTaskPersister in code that requires task.GetTaskPersister
// 		// and then make assertions.
//
// 	}
type GetTaskPersisterMock struct {
	// GetTaskFunc mocks the GetTask method.
	GetTaskFunc func(ctx context.Context, id int64) (entities.Task, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetTask holds details about calls to the GetTask method.
		GetTask []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
	}
	lockGetTask sync.RWMutex
}

// GetTask calls GetTaskFunc.
func (mock *GetTaskPersisterMock) GetTask(ctx context.Context, id int64) (entities.Task, error) {
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetTask.Lock()
	mock.calls.GetTask = append(mock.calls.GetTask, callInfo)
	mock.lockGetTask.Unlock()
	if mock.GetTaskFunc == nil {
		var (
			taskOut entities.Task
			errOut  error
		)
		return taskOut, errOut
	}
	return mock.GetTaskFunc(ctx, id)
}

// GetTaskCalls gets all the calls that were made to GetTask.
// Check the length with:
//     len(mockedGetTaskPersister.GetTaskCalls())
func (mock *GetTaskPersisterMock) GetTaskCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockGetTask.RLock()
	calls = mock.calls.GetTask
	mock.lockGetTask.RUnlock()
	return calls
}
